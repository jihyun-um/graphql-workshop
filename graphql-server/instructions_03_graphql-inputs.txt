[Step 1] 
The goal of this exercise is to replace the searchText argument of the articles query with a search object

Add an isPublished property of type Boolean to the Article type
Create an input called SearchInput which will be used as the search argument of the articles query
input SearchInput should have the following properties:
text of type String
published of type Boolean
Both of the properties should be optional.

Definition:

articles(search: SearchInput): [Article!]!
​
This should return all the draft articles:

query {
 articles(search: {published: false}){
    title
 }
}
​
This should return all the articles that contain "world":

query {
 articles(search: {text: "world"}) {
   title
 }
}
​
This should return all the published articles that contain "hello":

query {
 articles(search: {text: "hello", published: true}) {
   title
 }
}
​

[Step 2]
Reuse the SearchInput as the search argument of the articles property on the User type
type User {
 ... other fields here
 articles(search: SearchInput): [Article!]!
}
​
Extract the logic for filtering articles in a separate function called filterArticles and reuse that function both in type User and type Query
Example: the following query should return all articles by the user with id 123 that are published, and have "hello" in their title:

 query {
   user(id: "123") {
      id
      name
      articles(search:{published: true, text: "hello"}){
         id
         title
      }
   }
}
 query {
   user(id: "123") {
      id
      name
      articles(search:{published: true, text: "hello"}){
         id
         title
      }
   }
}